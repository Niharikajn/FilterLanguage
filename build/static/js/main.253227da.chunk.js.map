{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","updateLanguage","input","a","getData","state","finalData","filtered","data","filter","item","languageNameEnglish","toLowerCase","includes","languageNameNative","setState","value","length","fetch","then","response","json","console","log","rows","type","placeholder","this","onChange","e","target","className","map","index","image","src","alt","class","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAoEeA,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,eAnBmB,uCAmBF,WAAOC,GAAP,iBAAAC,EAAA,sDACTC,EAAU,EAAKC,MAAMC,UACrBC,EAAW,EAAKF,MAAMG,KAAKC,QAAO,SAAAC,GACtC,OAAQA,EAAKC,oBAAoBC,cAAcC,SAASX,EAAMU,gBAAiBF,EAAKI,mBAAmBF,cAAcC,SAASX,EAAMU,kBAEtI,EAAKG,SAAS,CACZC,MAAOd,EACPM,KAAMD,IAGa,IAAjBL,EAAMe,QACR,EAAKF,SAAS,CAAEP,KAAMJ,EAASY,MAAOd,IAXzB,2CAnBE,sDAEjB,EAAKG,MAAQ,CACXG,KAAM,GACNF,UAAW,GACXU,MAAO,IALQ,E,qDASnB,WAAqB,IAAD,OAClBE,MAAM,0CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAX,GACJc,QAAQC,IAAIf,GACZ,EAAKO,SAAS,CAAEP,KAAMA,EAAKA,KAAKgB,KAAMlB,UAAWE,EAAKA,KAAKgB,Y,oBAsBjE,WAAU,IAAD,OACP,OACE,gCACE,uBAAOC,KAAK,OAAOC,YAAY,SAC7BV,MAAOW,KAAKtB,MAAMW,MAClBY,SAAU,SAACC,GAAD,OAAO,EAAK5B,eAAe4B,EAAEC,OAAOd,UAC/CW,KAAKtB,MAAMG,MAAQmB,KAAKtB,MAAMG,KAAKS,OAAS,EAC3C,qBAAKc,UAAU,YAAf,SACGJ,KAAKtB,MAAMG,KAAKwB,KAAI,SAACtB,EAAMuB,GAC1B,OACE,mCACGvB,EAAKwB,MAAQ,sBAAiBH,UAAU,aAA3B,UACZ,qBAAKI,IAAKzB,EAAKwB,MAAOE,IAAI,QAC1B,+BAAK1B,EAAKC,oBAAV,KAAiCD,EAAKI,mBAAtC,SAFsBmB,GAKpB,YAKV,oBAAII,MAAM,WAAV,qC,GA1DMC,aCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.253227da.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      finalData: [],\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://www.mist-one.com/pub/languages')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        this.setState({ data: data.data.rows, finalData: data.data.rows });\r\n      }\r\n      )\r\n  }\r\n\r\n  updateLanguage = async (input) => {\r\n    const getData = this.state.finalData;\r\n    const filtered = this.state.data.filter(item => {\r\n      return (item.languageNameEnglish.toLowerCase().includes(input.toLowerCase()) ||item.languageNameNative.toLowerCase().includes(input.toLowerCase()) ) \r\n    })\r\n    this.setState({\r\n      value: input,\r\n      data: filtered\r\n    });\r\n\r\n    if (input.length === 0) {\r\n      this.setState({ data: getData, value: input })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" placeholder=\"search\"\r\n          value={this.state.value}\r\n          onChange={(e) => this.updateLanguage(e.target.value)} />\r\n        {this.state.data && this.state.data.length > 0 ?\r\n          <div className=\"container\">\r\n            {this.state.data.map((item, index) => {\r\n              return (\r\n                <>\r\n                  {item.image ? <div key={index} className=\"lanContent\">\r\n                    <img src={item.image} alt=\"pic\" />\r\n                    <h3>{item.languageNameEnglish} ({item.languageNameNative})</h3>\r\n\r\n                  </div>\r\n                    : null}\r\n                </>\r\n              )\r\n            })}\r\n          </div>\r\n          : <h2 class=\"NoResult\">No Results Found</h2>}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}